<script src="https://tryhackme.com/badge/1242958"></script>


	*Footprinting-and-Reconnaissance;
	tools-
echo
whoami
su ~switch user (-l ~inherit properties of new login user)
ls (-lh ~permissions)
cd
cat
pwd
find
Grep
operators= & (bkgrnd processes), && (multiple commands), > (new), >> (appends)
du -a -h -c -d <number>	--time 
stat
touch ~create file
mkdir
cp
mv
rm (-R ~for directories)
file ~determines file type

ssh user@ip
ping
nslookup
traceroute/tracert
Whois (TCP port 43)
nc
telnet
netstat
[Maltego]

curl
strings

***
	steps-
1.1 check connectivity and if remote system is online with PING
if host unreachable, might be issue with connectivity/OS or firewall is configured to block such packets
1.2 discovering the type and version of the installed web server with TELNET and HTTP commands. 
(if connected to mail server use SMTP and POP3 commands)
1.3 client that connects to a listening port; server that listens on a port with NETCAT/ NC 
(simple client or server over TCP or UDP)
traceroute to map the path to the target, ping to check if the target system responds to ICMP Echo, telnet 
1.4 discovering online systems before port scanning; ARP scan, ICMP scan, TCP/UDP ping scan
identify subnets in the networks and amount of local hosts
1.5 NMAP can return list of hosts it will scan with sL, (reverse DNS them can remove this option) or just directly scan

	Manual Discovery
2.1 /Robots.txt; pages allowed and banned from being shown on search engine
2.2 Favicon; to look up what framework used comparing to owasp database use md5 hash
2.3 /Sitemap.xml;  list of every file the website owner wishes to be listed on a search engine (also pages site no longer uses but still running)
2.4 HTTP headers give away scripting/programming language and webserver software
2.5 locate framework's website which helps learn more about software
	OSINT
2.6 Google Hacking / Dorking uses filters to get to the point eg; site, inurl, filetype, intitle
2.7 Wappalyzer helps identify technology used in website and version
2.8 Wayback Machine, GitHub, S3 Buckets (format; http(s)://{name}.s3.amazonaws.com; common; {name}-assets, {name}-www, {name}-public, {name}-private)
	Automated Discovery
requests made automatically and by comparing to wordlists (resource git clone https://github.com/danielmiessler/SecLists)
2.9 ffuf, dirb and gobuster.
2.10 robot.txt

	WEB
...

	Labs;
Networking- https://tryhackme.com/room/whatisnetworking, https://tryhackme.com/room/introtonetworking
HTTP- https://tryhackme.com/room/httpindetail
LAN- https://tryhackme.com/room/introtolan
DNS- https://tryhackme.com/room/dnsindetail
regexpress- https://tryhackme.com/room/catregex
	
	TO DO-
https://tryhackme.com/room/walkinganapplication
https://hamdisevben.medium.com/tryhackme-python-for-pentesters-47b7ce525b90
https://www.isecom.org/OSSTMM.3.pdf
https://www.ietf.org/rfc/rfc3912.txt
https://github.com/Samsar4/CEH-v10-Study-Guide/blob/master/modules/1-Reconnaissance-and-Footprinting.md
https://github.com/Samsar4/Ethical-Hacking-Labs/blob/master/1-Footprinting-and-Reconnaissance/3-Recon-ng.md

	Exploits-
cache poisoning= spoofing the IP
trojan-horse program= full network access behind the firewall
SOA information= vulnerabilities in their services and architectures and exploit them
Name Server= DNS hijacking and URL redirection
IP addresses= open ports,  intrude in the network
	other commands-
strings= english words from file binary code
	
****
	Terms to remember
...
	
	project ideas- https://www.simplilearn.com/top-cyber-security-projects-article
Port scanner
Packet Sniffer
Arp Poisoning tool

	Python
for, while loops
Files (read, write, append)
import libraries (request- http library, scapy-  network packets, pwntools- exploit development library)

{ALSO
learn how to use github.}
